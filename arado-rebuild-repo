#!/usr/bin/env python

# Software License Agreement (BSD License)
#
# Copyright (c) 2012, Eucalyptus Systems, Inc.
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms, with or
# without modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above
#   copyright notice, this list of conditions and the
#   following disclaimer.
#
#   Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Matt Spaulding mspaulding@eucalyptus.com

import os
import sys

from optparse import OptionParser

from arado.api import APIWrapper, PathBuilder
from arado import repo
from arado import signing
from arado import __version__


if __name__ == "__main__":
    parser = OptionParser(version="%%prog %s" % (__version__))
    parser.add_option("-p", "--project", dest="project",
        help="project for build promotion (e.g. eucalyptus)")
    parser.add_option("-c", "--commit", dest="commit",
        help="reference to a commit; either a hash, tag, or branch")
    parser.add_option("-r", "--release", dest="release",
        help="point-release version (e.g. 3.2)")
    parser.add_option("-t", "--type", dest="buildtype", default="nightly",
        help="optionally supply a build type (release, prerelease, nightly)")
    parser.add_option("-k", "--key", dest="signingkey",
        help="optionally supply a signing key (release, prerelease, nightly)")
    parser.add_option("-g", "--gpgdir", dest="gpgdir",
        help="optionally supply gpg key directory")
    (options, args) = parser.parse_args()

    if None in (options.project, options.commit, options.release):
        parser.error("Must specify project, commit and release!")

    if options.gpgdir:
        signing.set_gpghome(options.gpgdir)

    api = APIWrapper(options.project, options.commit)
    builder = PathBuilder(api=api, buildtype=options.buildtype, release=options.release)

    temp_repo = repo.stage(builder.dest_path, True)
    repo.sign(temp_repo, options.signingkey)
    repo.rebuild_all(temp_repo)
    repo.replace(temp_repo, builder.dest_path)

